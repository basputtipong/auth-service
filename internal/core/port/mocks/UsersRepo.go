// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	port "auth-service/internal/core/port"

	mock "github.com/stretchr/testify/mock"
)

// UsersRepo is an autogenerated mock type for the UsersRepo type
type UsersRepo struct {
	mock.Mock
}

// GetByUserId provides a mock function with given fields: userId
func (_m *UsersRepo) GetByUserId(userId string) (port.Users, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserId")
	}

	var r0 port.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (port.Users, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(string) port.Users); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(port.Users)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGreetingByUserId provides a mock function with given fields: userId
func (_m *UsersRepo) GetGreetingByUserId(userId string) (port.UsersWithGreeting, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for GetGreetingByUserId")
	}

	var r0 port.UsersWithGreeting
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (port.UsersWithGreeting, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(string) port.UsersWithGreeting); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(port.UsersWithGreeting)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePasscodeByUserId provides a mock function with given fields: req
func (_m *UsersRepo) UpdatePasscodeByUserId(req port.UsersRepoReq) error {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePasscodeByUserId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(port.UsersRepoReq) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUsersRepo creates a new instance of UsersRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsersRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsersRepo {
	mock := &UsersRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
